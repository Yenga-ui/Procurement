// <auto-generated />
using System;
using Core.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Core.Migrations
{
    [DbContext(typeof(MyPayrollContext))]
    [Migration("20220511083204_updatedCore")]
    partial class updatedCore
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Core.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Core.Models.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Core.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Core.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Core.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Core.Models.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Core.Models.Bank", b =>
                {
                    b.Property<int>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BankID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankId"), 1L, 1);

                    b.Property<string>("BankName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("LastChanged")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.HasKey("BankId");

                    b.HasIndex(new[] { "Code" }, "IX_Bank")
                        .IsUnique();

                    b.ToTable("Bank", (string)null);
                });

            modelBuilder.Entity("Core.Models.BankBranch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"), 1L, 1);

                    b.Property<int>("BankId")
                        .HasColumnType("int")
                        .HasColumnName("BankID");

                    b.Property<string>("BranchCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("BranchName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastChanged")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.HasKey("BranchId");

                    b.HasIndex("BankId");

                    b.HasIndex(new[] { "BranchCode" }, "IX_BankBranch")
                        .IsUnique()
                        .HasFilter("[BranchCode] IS NOT NULL");

                    b.ToTable("BankBranch", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Active")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fname")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FName");

                    b.Property<string>("Lname")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LName");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("Organization_Id");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cdf_Admin", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfAsset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Asset")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("asset");

                    b.Property<string>("AssetType")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("asset_type");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("createdBy");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dateCreated")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.ToTable("CDF_Asset", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfAssetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AssetType")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("assetType");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("createdBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.ToTable("CDF_AssetType", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfBid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dateCreated")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Details")
                        .HasMaxLength(350)
                        .IsUnicode(false)
                        .HasColumnType("varchar(350)")
                        .HasColumnName("details");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("supplierID");

                    b.Property<int?>("TenderId")
                        .HasColumnType("int")
                        .HasColumnName("tenderID");

                    b.HasKey("Id");

                    b.ToTable("CDF_Bid", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfBudget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BudgetName")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("budgetName");

                    b.Property<int?>("BudgetYear")
                        .HasColumnType("int")
                        .HasColumnName("budgetYear");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("createdBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Period")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("period");

                    b.HasKey("Id");

                    b.ToTable("CDF_Budget", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfBudgetExpense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("amount");

                    b.Property<int?>("BudgetId")
                        .HasColumnType("int")
                        .HasColumnName("budget_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<string>("Currency")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("currency");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("CDF_BudgetExpense", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfBudgetPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BudgetId")
                        .HasColumnType("int")
                        .HasColumnName("budget_id");

                    b.Property<string>("Period")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("period");

                    b.HasKey("Id");

                    b.ToTable("CDF_BudgetPeriod", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfBudgetRevenue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Amount")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("amount");

                    b.Property<int?>("BudgetId")
                        .HasColumnType("int")
                        .HasColumnName("budget_id");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Currency")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("currency");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("CDF_BudgetRevenue", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfCompanyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CompanyType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CDF_CompanyType", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfConstituency", b =>
                {
                    b.Property<string>("Constituency")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("constituency");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("country");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Latitude")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("latitude");

                    b.Property<string>("Longitude")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("longitude");

                    b.Property<string>("Province")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("province");

                    b.ToTable("CDF_Constituency", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfConstituency1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Constituency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CdfConstituency", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dateCreated")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Department")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("department");

                    b.HasKey("Id");

                    b.ToTable("CDF_Department", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfEvaluationmethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Method")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("method");

                    b.HasKey("Id");

                    b.ToTable("CDF_EVALUATIONMETHOD", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfExpenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("createdBy");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ExpenseType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("expenseType");

                    b.HasKey("Id");

                    b.ToTable("CDF_ExpenseType", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfFund", b =>
                {
                    b.Property<string>("Amount")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Currency")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("currency");

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("currency_code");

                    b.Property<string>("Fund")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("fund");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.ToTable("CDF_Fund", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfFund1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Amount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fund")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CdfFund", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfIdentityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.ToTable("CDF_IdentityType", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfIdentityType1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CdfIdentityType", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dateCreated")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("LevelInOrganization")
                        .HasColumnType("int")
                        .HasColumnName("levelInOrganization");

                    b.Property<int?>("NumberOfUsers")
                        .HasColumnType("int")
                        .HasColumnName("numberOfUsers");

                    b.HasKey("Id");

                    b.ToTable("CDF_Levels", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfOrganization", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(120)
                        .IsUnicode(false)
                        .HasColumnType("varchar(120)")
                        .HasColumnName("name");

                    b.Property<string>("Activated")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("activated");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FirstAdminEmail")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("first_Admin_Email");

                    b.Property<string>("FirstAdminId")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("first_Admin_ID");

                    b.Property<string>("FirstAdminIdentityType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("first_Admin_Identity_Type");

                    b.Property<string>("FirstAdminPhone")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("first_Admin_Phone");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("logo");

                    b.HasKey("Name");

                    b.ToTable("CDF_ORGANIZATION", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfOrganization1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Activated")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstAdminEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstAdminId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstAdminIdentityType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstAdminPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstAdminUsername")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CdfOrganization", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfOrganizationActivation", b =>
                {
                    b.Property<int?>("Activation")
                        .HasColumnType("int")
                        .HasColumnName("activation");

                    b.Property<int?>("ActivationCode")
                        .HasColumnType("int")
                        .HasColumnName("activationCode");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("organization_id");

                    b.ToTable("CDF_OrganizationActivation", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfOrganizationbranch", b =>
                {
                    b.Property<string>("BranchAddress")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("branchAddress");

                    b.Property<string>("BranchName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("branchName");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.ToTable("CDF_ORGANIZATIONBRANCHES", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfOrganizationdepartment", b =>
                {
                    b.Property<int?>("DepartmentHeadJobId")
                        .HasColumnType("int")
                        .HasColumnName("departmentHeadJobID");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("departmentName");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.ToTable("CDF_ORGANIZATIONDEPARTMENTS", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfOrganizationjob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("OrganizationGrade")
                        .HasColumnType("int")
                        .HasColumnName("organization_grade");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("organization_id");

                    b.Property<int?>("OrganizationLevel")
                        .HasColumnType("int")
                        .HasColumnName("organization_level");

                    b.Property<string>("OrganizationTitle")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("organization_title");

                    b.Property<int?>("Strength")
                        .HasColumnType("int")
                        .HasColumnName("strength");

                    b.ToTable("CDF_ORGANIZATIONJOBS", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfOrganizationprofile", b =>
                {
                    b.Property<string>("CompanyAddress")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("companyAddress");

                    b.Property<string>("CompanyEmail")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("companyEmail");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CompanyWebsite")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("LegalName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("organization_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationId"), 1L, 1);

                    b.ToTable("CDF_ORGANIZATIONPROFILE", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfPermission", b =>
                {
                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime")
                        .HasColumnName("dateCreated");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Permission")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("permission");

                    b.ToTable("CDF_Permission", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfPlanItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Award")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<decimal?>("Budget")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("budget");

                    b.Property<string>("Class")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("class");

                    b.Property<string>("Comments")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("createdBy");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Prequalification")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("ProcPlanId")
                        .HasColumnType("int")
                        .HasColumnName("procPlanID");

                    b.Property<string>("ProcurementMethod")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("procurement_method");

                    b.Property<string>("ProjectCode")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Project_Code");

                    b.Property<string>("Publication")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("publication");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("RefNo")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Ref_No");

                    b.Property<string>("SourceOfFunds")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("source_of_funds");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("datetime");

                    b.Property<string>("Typeofentry")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("typeofentry");

                    b.Property<string>("Unitofmeasure")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("unitofmeasure");

                    b.Property<string>("Unspsc")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("UNSPSC");

                    b.HasKey("Id");

                    b.ToTable("CDF_PlanItems", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfProcPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("comments");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int")
                        .HasColumnName("entityID");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime")
                        .HasColumnName("modified");

                    b.Property<int?>("Version")
                        .HasColumnType("int")
                        .HasColumnName("version");

                    b.Property<string>("Year")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.ToTable("CDF_ProcPlan", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfProcurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Method")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("method");

                    b.Property<int?>("NumberOfBidders")
                        .HasColumnType("int")
                        .HasColumnName("numberOfBidders");

                    b.HasKey("Id");

                    b.ToTable("CDF_Procurement", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfProcurementEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("EntityName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("entityName");

                    b.Property<string>("Type")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("CDF_ProcurementEntity", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfProcurementEntityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("CDF_ProcurementEntityType", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("createdBy");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dateCreated")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("LevelId")
                        .HasColumnType("int")
                        .HasColumnName("levelID");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.ToTable("CDF_Role", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfRole1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("CDF_Roles", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfRole2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CdfRoles", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("createdBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Service")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("service");

                    b.HasKey("Id");

                    b.ToTable("CDF_Services", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfStatus", b =>
                {
                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.ToTable("CDF_Status", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfStatus1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CdfStatus", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("createdBy");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Stock")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("stock");

                    b.Property<string>("StockCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("stockCode");

                    b.HasKey("Id");

                    b.ToTable("CDF_Stock", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfSupplierFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Active")
                        .HasColumnType("int")
                        .HasColumnName("active");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dateCreated")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("SupplierFee")
                        .HasColumnType("decimal(18,0)");

                    b.HasKey("Id");

                    b.ToTable("CDF_SupplierFee", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfSupplierResDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("path");

                    b.Property<int>("SectionId")
                        .HasColumnType("int")
                        .HasColumnName("section_id");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("Cdf_Supplier_ResDocuments", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfSupplierResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SectionId")
                        .HasColumnType("int")
                        .HasColumnName("section_id");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("supplier_id");

                    b.Property<int>("TenderId")
                        .HasColumnType("int")
                        .HasColumnName("tender_id");

                    b.Property<string>("TextResponse")
                        .HasColumnType("text")
                        .HasColumnName("text_response");

                    b.HasKey("Id");

                    b.ToTable("Cdf_Supplier_Response", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfSupplierTenderPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Paid")
                        .HasColumnType("int")
                        .HasColumnName("paid");

                    b.Property<string>("SupplierCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("supplierCode");

                    b.Property<string>("TenderCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tenderCode");

                    b.HasKey("Id");

                    b.ToTable("CDF_SupplierTenderPayment", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfTender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Active")
                        .HasColumnType("int")
                        .HasColumnName("active");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("amount");

                    b.Property<int?>("BudgetExpenseId")
                        .HasColumnType("int")
                        .HasColumnName("budget_expense_id");

                    b.Property<int?>("BudgetId")
                        .HasColumnType("int")
                        .HasColumnName("budget_id");

                    b.Property<string>("Category")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("category");

                    b.Property<DateTime?>("ClarificationDeadline")
                        .HasColumnType("datetime")
                        .HasColumnName("clarificationDeadline");

                    b.Property<DateTime?>("ContractNoticeDate")
                        .HasColumnType("datetime")
                        .HasColumnName("contractNoticeDate");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dateCreated")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Department")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("department");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime")
                        .HasColumnName("dueDate");

                    b.Property<string>("EvaluationMechanism")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("evaluationMechanism");

                    b.Property<DateTime?>("InvitationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("invitationDate");

                    b.Property<string>("LongDescription")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("longDescription");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("shortDescription");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("('Submission')");

                    b.Property<DateTime?>("SubmissionDeadline")
                        .HasColumnType("datetime")
                        .HasColumnName("submissionDeadline");

                    b.Property<string>("TenderProcedure")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("tenderProcedure");

                    b.Property<string>("TenderProcurementTechnique")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("tenderProcurementTechnique");

                    b.Property<string>("TenderSerial")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("tenderSerial");

                    b.Property<string>("Units")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("units");

                    b.HasKey("Id");

                    b.ToTable("CDF_Tender", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfTenderCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("category");

                    b.Property<string>("Uom")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("uom");

                    b.HasKey("Id");

                    b.ToTable("CDF_TenderCategory", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfTenderProcedure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("createdDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("NumberofBidders")
                        .HasColumnType("int")
                        .HasColumnName("numberofBidders");

                    b.Property<string>("TenderProcedure")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("tenderProcedure");

                    b.HasKey("Id");

                    b.ToTable("CDF_TenderProcedure", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfTenderSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("SupportingDocumentation")
                        .HasColumnType("int")
                        .HasColumnName("supporting_documentation");

                    b.Property<int?>("TenderId")
                        .HasColumnType("int")
                        .HasColumnName("tenderID");

                    b.Property<int?>("TextResponse")
                        .HasColumnType("int")
                        .HasColumnName("text_response");

                    b.Property<string>("Title")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("Cdf_TenderSection", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfTenderSectionSub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("NumberInput")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("numberInput");

                    b.Property<string>("SupportingDocumentation")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("supportingDocumentation");

                    b.Property<int?>("TenderId")
                        .HasColumnType("int")
                        .HasColumnName("tenderID");

                    b.Property<int?>("TenderSectionId")
                        .HasColumnType("int")
                        .HasColumnName("tenderSectionID");

                    b.Property<string>("TextResponse")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("textResponse");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("CDF_TenderSectionSub", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ConsituencyId")
                        .HasColumnType("int")
                        .HasColumnName("consituency_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("createdBy");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<int?>("EmailConfirmed")
                        .HasColumnType("int")
                        .HasColumnName("emailConfirmed");

                    b.Property<string>("Fname")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("fname");

                    b.Property<string>("Lname")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("lname");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("logo");

                    b.Property<string>("Password")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("phone");

                    b.Property<string>("ProcEntity")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("procEntity");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<int?>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<string>("Username")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("CDF_User", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfUser1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("createdBy");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dateCreated")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("logo");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("organization_id");

                    b.Property<string>("Password")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("ProcEntity")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("procEntity");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("CDF_Users", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfUser2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ConsituencyId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CdfUser", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfUserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("CDF_UserType", (string)null);
                });

            modelBuilder.Entity("Core.Models.CdfUserType1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CdfUserType", (string)null);
                });

            modelBuilder.Entity("Core.Models.CeecCategory", b =>
                {
                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("category");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.ToTable("CEEC_CATEGORY", (string)null);
                });

            modelBuilder.Entity("Core.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"), 1L, 1);

                    b.Property<string>("CompanyName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.HasKey("CompanyId");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("Core.Models.CountryName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CountryCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CountryName1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CountryName");

                    b.Property<int?>("CountryPhoneCode")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CountryCode" }, "IX_CountryNames")
                        .IsUnique()
                        .HasFilter("[CountryCode] IS NOT NULL");

                    b.ToTable("CountryNames");
                });

            modelBuilder.Entity("Core.Models.CurrencySymbol", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("code");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("country");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(39)
                        .IsUnicode(false)
                        .HasColumnType("varchar(39)")
                        .HasColumnName("currency");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("symbol");

                    b.HasKey("Id");

                    b.ToTable("Currency_Symbol", (string)null);
                });

            modelBuilder.Entity("Core.Models.CurrencySymbol1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symbol")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CurrencySymbol", (string)null);
                });

            modelBuilder.Entity("Core.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"), 1L, 1);

                    b.Property<string>("ChangedByUser")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DepartmentCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("LastChanged")
                        .HasColumnType("datetime");

                    b.Property<string>("LongDescription")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasDefaultValueSql("('A')");

                    b.HasKey("DepartmentId");

                    b.HasIndex(new[] { "DepartmentCode" }, "IX_Department")
                        .IsUnique();

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("Core.Models.DisciplinaryCase", b =>
                {
                    b.Property<int>("CaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CaseId"), 1L, 1);

                    b.Property<string>("CaseDescription")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("CaseOutcome")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CaseType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOffenceCommitted")
                        .HasColumnType("date");

                    b.Property<string>("EmployeeCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CaseId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("DisciplinaryCases");
                });

            modelBuilder.Entity("Core.Models.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int?>("BidId")
                        .HasColumnType("int")
                        .HasColumnName("bidID");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FileType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.Property<int?>("TenderId")
                        .HasColumnType("int")
                        .HasColumnName("TenderID");

                    b.HasKey("Id");

                    b.ToTable("Document", (string)null);
                });

            modelBuilder.Entity("Core.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"), 1L, 1);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateEngaged")
                        .HasColumnType("datetime");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("DepartmentID");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("EmployeeStatusId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeStatusID");

                    b.Property<int>("EntityId")
                        .HasColumnType("int")
                        .HasColumnName("EntityID");

                    b.Property<int?>("JobGeneralId")
                        .HasColumnType("int")
                        .HasColumnName("JobGeneralID");

                    b.Property<int?>("JobGradeId")
                        .HasColumnType("int")
                        .HasColumnName("JobGradeID");

                    b.Property<int?>("JobTitleId")
                        .HasColumnType("int")
                        .HasColumnName("JobTitleID");

                    b.Property<DateTime?>("LeaveStartDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("NatureOfContractId")
                        .HasColumnType("int")
                        .HasColumnName("NatureOfContractID");

                    b.Property<DateTime?>("PensionStartDate")
                        .HasColumnType("date");

                    b.Property<int?>("ReportToEmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("ReportToEmployeeID");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("TerminationReasonId")
                        .HasColumnType("int")
                        .HasColumnName("TerminationReasonID");

                    b.HasKey("EmployeeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeStatusId");

                    b.HasIndex("JobGeneralId");

                    b.HasIndex("JobGradeId");

                    b.HasIndex("JobTitleId");

                    b.HasIndex("NatureOfContractId");

                    b.HasIndex("TerminationReasonId");

                    b.HasIndex(new[] { "EmployeeCode" }, "IX_Employee")
                        .IsUnique();

                    b.HasIndex(new[] { "EntityId" }, "IX_Employee_1")
                        .IsUnique();

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("Core.Models.EmployeeBankDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccountName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("IsDefaultBank")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex(new[] { "AccountNumber" }, "IX_EmployeeBankDetails")
                        .IsUnique()
                        .HasFilter("[AccountNumber] IS NOT NULL");

                    b.ToTable("EmployeeBankDetails");
                });

            modelBuilder.Entity("Core.Models.EmployeeBankDetailsView", b =>
                {
                    b.Property<string>("AccountName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("BankName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("BranchCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("BranchName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("EmployeeCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IsDefaultBank")
                        .HasColumnType("int");

                    b.Property<string>("StatusCode")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.ToView("EmployeeBankDetailsView");
                });

            modelBuilder.Entity("Core.Models.EmployeeDetail", b =>
                {
                    b.Property<decimal?>("BasicPay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BirthDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CellPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DateEngaged")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<string>("EmployeeStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EntityCode")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("IdType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Idnumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("IDNumber");

                    b.Property<string>("JobGeneral")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("JobGrade")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("JobTitle")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LeaveStartDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MaidenName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MaritalStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nationality")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NatureOfContract")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PensionStartDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicalAddress")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PositionCode")
                        .HasMaxLength(113)
                        .IsUnicode(false)
                        .HasColumnType("varchar(113)");

                    b.Property<int?>("SocialSecurityNumber")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("TerminationDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TerminationReason")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToView("EmployeeDetail");
                });

            modelBuilder.Entity("Core.Models.EmployeeHistory", b =>
                {
                    b.Property<int>("EmployeeHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeHistoryId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateEngaged")
                        .HasColumnType("datetime");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("JobGeneralId")
                        .HasColumnType("int");

                    b.Property<int?>("JobGradeId")
                        .HasColumnType("int");

                    b.Property<int?>("JobTitleId")
                        .HasColumnType("int");

                    b.Property<int?>("NatureOfContractId")
                        .HasColumnType("int");

                    b.Property<string>("PositionCode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("TerminationReasonId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeHistoryId");

                    b.ToTable("EmployeeHistory", (string)null);
                });

            modelBuilder.Entity("Core.Models.EmployeeQualification", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileId"), 1L, 1);

                    b.Property<byte[]>("DocumentContent")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DocumentType")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("FieldOfStudy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("GuId")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("QualificationType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("FileId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeQualifications");
                });

            modelBuilder.Entity("Core.Models.EmployeeQualificationsView", b =>
                {
                    b.Property<byte[]>("DocumentContent")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DocumentName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DocumentType")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("EmployeeCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("FieldOfStudy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("GuId")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("QualificationType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.ToView("EmployeeQualificationsView");
                });

            modelBuilder.Entity("Core.Models.EmployeeRemuneration", b =>
                {
                    b.Property<int>("RemunerationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RemunerationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RemunerationId"), 1L, 1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Reason")
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.Property<decimal?>("RemunerationAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("RemunerationId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeRemuneration", (string)null);
                });

            modelBuilder.Entity("Core.Models.EmployeeStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"), 1L, 1);

                    b.Property<string>("StatusCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("StatusDescription")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("StatusId");

                    b.HasIndex(new[] { "StatusCode" }, "IX_EmployeeStatus")
                        .IsUnique()
                        .HasFilter("[StatusCode] IS NOT NULL");

                    b.ToTable("EmployeeStatus", (string)null);
                });

            modelBuilder.Entity("Core.Models.EmployeeTimeSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("DateApproved")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateWorked")
                        .HasColumnType("date");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("HoursWorked")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("PeriodEndDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PeriodStartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeTimeSheet", (string)null);
                });

            modelBuilder.Entity("Core.Models.Entity", b =>
                {
                    b.Property<int>("EntityCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityCode"), 1L, 1);

                    b.Property<string>("AccountName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("BankBranchId")
                        .HasColumnType("int")
                        .HasColumnName("BankBranchID");

                    b.Property<int?>("BankId")
                        .HasColumnType("int")
                        .HasColumnName("BankID");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CellNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("CountryOfBirthId")
                        .HasColumnType("int")
                        .HasColumnName("CountryOfBirthID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("EmployeeStatusId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeStatusID");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Idnumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("IDNumber");

                    b.Property<int?>("IdnumberType")
                        .HasColumnType("int")
                        .HasColumnName("IDNumberType");

                    b.Property<DateTime?>("LastChanged")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MaidenName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("MaritalStatusId")
                        .HasColumnType("int")
                        .HasColumnName("MaritalStatusID");

                    b.Property<string>("Nationality")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhysicalAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("SocialSecurityNumber")
                        .HasColumnType("int");

                    b.Property<int?>("TitleId")
                        .HasColumnType("int")
                        .HasColumnName("TitleID");

                    b.Property<string>("WorkAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("WorkNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("EntityCode");

                    b.HasIndex("CountryOfBirthId");

                    b.HasIndex("EmployeeStatusId");

                    b.HasIndex("IdnumberType");

                    b.HasIndex("MaritalStatusId");

                    b.HasIndex("TitleId");

                    b.HasIndex(new[] { "Idnumber" }, "IX_Entity")
                        .IsUnique();

                    b.ToTable("Entity", (string)null);
                });

            modelBuilder.Entity("Core.Models.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("DateLogged")
                        .HasColumnType("datetime");

                    b.Property<string>("ErrorDescription")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.ToTable("ErrorLog", (string)null);
                });

            modelBuilder.Entity("Core.Models.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasMaxLength(2)
                        .HasColumnType("nchar(2)")
                        .IsFixedLength();

                    b.Property<string>("LongDescription")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("GenderId");

                    b.HasIndex(new[] { "Code" }, "IX_Gender")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("Gender", (string)null);
                });

            modelBuilder.Entity("Core.Models.HistoryPayrollRun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<int?>("PayPeriod")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HistoryPayrollRuns");
                });

            modelBuilder.Entity("Core.Models.IdnumberType", b =>
                {
                    b.Property<int>("IdnumberTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDNumberTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdnumberTypeId"), 1L, 1);

                    b.Property<string>("Idcode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("IDCode");

                    b.Property<string>("LongDescription")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("IdnumberTypeId");

                    b.HasIndex(new[] { "Idcode" }, "IX_IDNumberType")
                        .IsUnique()
                        .HasFilter("[IDCode] IS NOT NULL");

                    b.ToTable("IDNumberType", (string)null);
                });

            modelBuilder.Entity("Core.Models.IncreaseHistory", b =>
                {
                    b.Property<int>("IncreaseHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IncreaseHistoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncreaseHistoryId"), 1L, 1);

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<decimal?>("IncreaseAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("IncreaseAppliedOn")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("IncreasePercentage")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("IncreaseProcessedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("IncreaseReasonTypeId")
                        .HasColumnType("int")
                        .HasColumnName("IncreaseReasonTypeID");

                    b.Property<int?>("JobGradeId")
                        .HasColumnType("int")
                        .HasColumnName("JobGradeID");

                    b.Property<int?>("JobTitleId")
                        .HasColumnType("int")
                        .HasColumnName("JobTitleID");

                    b.Property<DateTime?>("LastChanged")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("NewAnnualSalary")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal?>("NewMonthlySalary")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal?>("NewRatePerDay")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal?>("NewRatePerHour")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal?>("PreviousAnnualSalary")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal?>("PreviousMonthlySalary")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal?>("PreviousRatePerDay")
                        .HasColumnType("decimal(18,5)");

                    b.Property<decimal?>("PreviousRatePerHour")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int?>("ProcessedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("ProcessedByUserID");

                    b.HasKey("IncreaseHistoryId");

                    b.ToTable("IncreaseHistory", (string)null);
                });

            modelBuilder.Entity("Core.Models.IncreaseReason", b =>
                {
                    b.Property<int>("IncreaseReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IncreaseReasonID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncreaseReasonId"), 1L, 1);

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("LastChanged")
                        .HasColumnType("datetime");

                    b.Property<string>("LongDescription")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Status")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("UserId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("UserID");

                    b.HasKey("IncreaseReasonId");

                    b.HasIndex(new[] { "Code" }, "IX_IncreaseReason")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("IncreaseReason", (string)null);
                });

            modelBuilder.Entity("Core.Models.JobGeneral", b =>
                {
                    b.Property<int>("JobGeneralId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("JobGeneralID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobGeneralId"), 1L, 1);

                    b.Property<string>("LongDescription")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.HasKey("JobGeneralId");

                    b.ToTable("JobGeneral", (string)null);
                });

            modelBuilder.Entity("Core.Models.JobGrade", b =>
                {
                    b.Property<int>("JobGradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("JobGradeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobGradeId"), 1L, 1);

                    b.Property<string>("JobGradeCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("JobGradeDescription")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.HasKey("JobGradeId");

                    b.HasIndex(new[] { "JobGradeCode" }, "IX_JobGrade")
                        .IsUnique()
                        .HasFilter("[JobGradeCode] IS NOT NULL");

                    b.ToTable("JobGrade", (string)null);
                });

            modelBuilder.Entity("Core.Models.JobTitle", b =>
                {
                    b.Property<int>("JobTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobTitleId"), 1L, 1);

                    b.Property<string>("ChangedByUser")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("JobGradeId")
                        .HasColumnType("int");

                    b.Property<string>("Jobcode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("LastChanged")
                        .HasColumnType("datetime");

                    b.Property<string>("LongDescription")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.HasKey("JobTitleId");

                    b.HasIndex("JobGradeId");

                    b.HasIndex(new[] { "Jobcode" }, "IX_JobTitle")
                        .IsUnique();

                    b.ToTable("JobTitle", (string)null);
                });

            modelBuilder.Entity("Core.Models.LeaveDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LeaveAccrualStartDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("LeaveBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LeaveTypeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MonetaryEquivalent")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("LeaveDetail", (string)null);
                });

            modelBuilder.Entity("Core.Models.LeaveEntitlementView", b =>
                {
                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("Entitlement")
                        .HasColumnType("int");

                    b.Property<string>("LeaveAccrualStartDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("LeaveBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LeaveTypeDescription")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("MonetaryValue")
                        .HasColumnType("decimal(38,6)");

                    b.ToView("LeaveEntitlementView");
                });

            modelBuilder.Entity("Core.Models.LeaveTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("DateApplied")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DateApproved")
                        .HasColumnType("date");

                    b.Property<string>("EmployeeCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Guid")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LeaveEndDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LeaveStartDate")
                        .HasColumnType("date");

                    b.Property<int?>("LeaveTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("UnitsTaken")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LeaveTransactions");
                });

            modelBuilder.Entity("Core.Models.LeaveType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicableGender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("BalanceBroughtForwardOption")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Cycle")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("date");

                    b.Property<int>("Entitlement")
                        .HasColumnType("int");

                    b.Property<string>("LeaveTypeDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Code" }, "IX_LeaveTypes")
                        .IsUnique();

                    b.ToTable("LeaveTypes");
                });

            modelBuilder.Entity("Core.Models.MaritalStatus", b =>
                {
                    b.Property<int>("MaritalStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaritalStatusId"), 1L, 1);

                    b.Property<string>("LongDescription")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.HasKey("MaritalStatusId");

                    b.ToTable("MaritalStatus", (string)null);
                });

            modelBuilder.Entity("Core.Models.NapsaConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<decimal>("MaximumCeiling")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("NapsaConfiguration", (string)null);
                });

            modelBuilder.Entity("Core.Models.NatureOfContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ContractTypeCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ContractTypeDecsription")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ContractTypeCode" }, "IX_NatureOfContract")
                        .IsUnique()
                        .HasFilter("[ContractTypeCode] IS NOT NULL");

                    b.ToTable("NatureOfContract", (string)null);
                });

            modelBuilder.Entity("Core.Models.NhimaConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("NhimaConfiguration", (string)null);
                });

            modelBuilder.Entity("Core.Models.PayrollDeductionDef", b =>
                {
                    b.Property<int>("DefId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DefID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DefId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<string>("DeductionCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DeductionDecsription")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Formula")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("LineFlag")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Status")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.HasKey("DefId");

                    b.HasIndex(new[] { "DeductionCode" }, "IX_PayrollDeductionDef")
                        .IsUnique()
                        .HasFilter("[DeductionCode] IS NOT NULL");

                    b.ToTable("PayrollDeductionDef", (string)null);
                });

            modelBuilder.Entity("Core.Models.PayrollEarningDef", b =>
                {
                    b.Property<int>("DefId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DefID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DefId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<string>("EarningLineCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("EarningLineDescription")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Formula")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("LineFlag")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Status")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.HasKey("DefId");

                    b.HasIndex(new[] { "EarningLineCode" }, "IX_PayrollEarningDef")
                        .IsUnique()
                        .HasFilter("[EarningLineCode] IS NOT NULL");

                    b.ToTable("PayrollEarningDef", (string)null);
                });

            modelBuilder.Entity("Core.Models.PayrollLinesFrequecyCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Description")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Code" }, "IX_PayrollLinesFrequecyCodes")
                        .IsUnique();

                    b.ToTable("PayrollLinesFrequecyCodes");
                });

            modelBuilder.Entity("Core.Models.PayrollRunDetailsView", b =>
                {
                    b.Property<string>("AccountName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("BankName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("BasicPay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BranchCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("BranchName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DateEngaged")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("JobGeneral")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("JobGrade")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("JobTitle")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.ToView("PayrollRunDetailsView");
                });

            modelBuilder.Entity("Core.Models.PayslipDefinition", b =>
                {
                    b.Property<int>("PayslipDefId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayslipDefId"), 1L, 1);

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("OccurenceCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("PayPeriod")
                        .HasColumnType("int");

                    b.Property<string>("PayrollDefinitionCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("PayrollDefinitionFlag")
                        .HasColumnType("int");

                    b.Property<DateTime>("PeriodEndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("PeriodStartDate")
                        .HasColumnType("date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UserId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PayslipDefId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OccurenceCode");

                    b.ToTable("PayslipDefinition", (string)null);
                });

            modelBuilder.Entity("Core.Models.PayslipDetail", b =>
                {
                    b.Property<int>("PayslipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayslipId"), 1L, 1);

                    b.Property<decimal?>("DeductionAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int?>("DeductionDefId")
                        .HasColumnType("int");

                    b.Property<decimal?>("EarningAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int?>("EarningDefId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("LineFlag")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PayPeriod")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("PayslipId");

                    b.ToTable("PayslipDetail", (string)null);
                });

            modelBuilder.Entity("Core.Models.PayslipDetailArchive", b =>
                {
                    b.Property<int>("PayslipArchiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PayslipArchiveID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayslipArchiveId"), 1L, 1);

                    b.Property<decimal?>("DeductionAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int?>("DeductionDefId")
                        .HasColumnType("int")
                        .HasColumnName("DeductionDefID");

                    b.Property<decimal?>("EarningAmount")
                        .HasColumnType("decimal(18,5)");

                    b.Property<int?>("EarningDefId")
                        .HasColumnType("int")
                        .HasColumnName("EarningDefID");

                    b.Property<int?>("EmpoyeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmpoyeeID");

                    b.Property<DateTime?>("ExportDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ExportedByUserId")
                        .HasColumnType("int")
                        .HasColumnName("ExportedByUserID");

                    b.Property<DateTime?>("PayPeriod")
                        .HasColumnType("datetime");

                    b.HasKey("PayslipArchiveId");

                    b.ToTable("PayslipDetailArchive", (string)null);
                });

            modelBuilder.Entity("Core.Models.PositionCodesView", b =>
                {
                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmployeeCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("EmployeeName")
                        .HasMaxLength(201)
                        .IsUnicode(false)
                        .HasColumnType("varchar(201)");

                    b.Property<string>("JobGrade")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("JobTitleCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("LongDescription")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PositionCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ReportsToPosition")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.ToView("PositionCodesView");
                });

            modelBuilder.Entity("Core.Models.PositionDetail", b =>
                {
                    b.Property<int>("PositionCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PositionCodeId"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("JobTitleCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("LongDescription")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PositionCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ReportsToPositionCode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("VacancyDate")
                        .HasColumnType("datetime");

                    b.HasKey("PositionCodeId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("JobTitleCode");

                    b.HasIndex(new[] { "PositionCode" }, "IX_PositionDetails")
                        .IsUnique();

                    b.ToTable("PositionDetails");
                });

            modelBuilder.Entity("Core.Models.PromotionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("NewPositionCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("OldPositionCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("PromotionDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("PromotionHistory", (string)null);
                });

            modelBuilder.Entity("Core.Models.Reference", b =>
                {
                    b.Property<int?>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Reference1")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("reference");

                    b.ToTable("reference", (string)null);
                });

            modelBuilder.Entity("Core.Models.StatusDescription", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"), 1L, 1);

                    b.Property<string>("StatusCode")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("StausDescription")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("StatusId")
                        .HasName("PK_GeneralStatusDescription");

                    b.HasIndex(new[] { "StatusId" }, "IX_GeneralStatusDescription")
                        .IsUnique();

                    b.ToTable("StatusDescription", (string)null);
                });

            modelBuilder.Entity("Core.Models.SupplierRegAttachment", b =>
                {
                    b.Property<string>("Attachment")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("attachment");

                    b.Property<string>("AttachmentType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("attachmentType");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.ToTable("Supplier_RegAttachment", (string)null);
                });

            modelBuilder.Entity("Core.Models.SupplierRegistation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CompanyRegistrationNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("companyRegistrationNumber");

                    b.Property<string>("CompanyStatusNapsa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("companyStatusNapsa");

                    b.Property<string>("CompanyStatusZra")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("companyStatusZRA");

                    b.Property<string>("ConfirmationCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("confirmationCode");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("country");

                    b.Property<string>("CountryOfRegistration")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("countryOfRegistration");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("email");

                    b.Property<string>("OrganizationName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("organizationName");

                    b.Property<string>("OrganizationType")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("organizationType");

                    b.Property<int?>("Paid")
                        .HasColumnType("int")
                        .HasColumnName("paid");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("phone");

                    b.Property<string>("Shareholders")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("shareholders");

                    b.Property<string>("SupplierRegistrationCode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("supplierRegistrationCode");

                    b.Property<string>("Tpin")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("TPIN");

                    b.HasKey("Id");

                    b.ToTable("SupplierRegistation", (string)null);
                });

            modelBuilder.Entity("Core.Models.TaxTableDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BandDescription")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("LowerLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<decimal?>("UperLimit")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("TaxTableDefinition", (string)null);
                });

            modelBuilder.Entity("Core.Models.TerminationReason", b =>
                {
                    b.Property<int>("TerminationReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TerminationReasonId"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.HasKey("TerminationReasonId");

                    b.HasIndex(new[] { "Code" }, "IX_TerminationReason")
                        .IsUnique();

                    b.ToTable("TerminationReason", (string)null);
                });

            modelBuilder.Entity("Core.Models.TitleDescription", b =>
                {
                    b.Property<int>("TitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TitleId"), 1L, 1);

                    b.Property<string>("TitleDescription1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("TitleDescription");

                    b.HasKey("TitleId");

                    b.ToTable("TitleDescription", (string)null);
                });

            modelBuilder.Entity("Core.Models.UserAuditLog", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AuditID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditId"), 1L, 1);

                    b.Property<string>("Action")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("ActionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ActionType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("FieldName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Guid")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("GUID");

                    b.Property<string>("NewValue")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("OldValue")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("AuditId");

                    b.ToTable("UserAuditLogs");
                });

            modelBuilder.Entity("Core.Models.UserDetail", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("EmployeId")
                        .HasColumnType("int");

                    b.Property<int?>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastLogon")
                        .HasColumnType("datetime");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int")
                        .HasColumnName("organization_id");

                    b.Property<string>("Password")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("ProfileStatus")
                        .HasColumnType("int");

                    b.Property<int?>("UserRoleId")
                        .HasColumnType("int")
                        .HasColumnName("UserRoleID");

                    b.Property<string>("Username")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("UserId");

                    b.HasIndex("ProfileStatus");

                    b.HasIndex("UserRoleId");

                    b.HasIndex(new[] { "EmployeId" }, "IX_UserDetail")
                        .IsUnique()
                        .HasFilter("[EmployeId] IS NOT NULL");

                    b.HasIndex(new[] { "Username" }, "IX_UserDetail_1")
                        .IsUnique()
                        .HasFilter("[Username] IS NOT NULL");

                    b.ToTable("UserDetail", (string)null);
                });

            modelBuilder.Entity("Core.Models.UserMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("MenuDescription")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserMenu", (string)null);
                });

            modelBuilder.Entity("Core.Models.UserMenuMapping", b =>
                {
                    b.Property<int>("UserMenuMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserMenuMappingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserMenuMappingId"), 1L, 1);

                    b.Property<int?>("UserMenuId")
                        .HasColumnType("int")
                        .HasColumnName("UserMenuID");

                    b.Property<int?>("UserRoleId")
                        .HasColumnType("int")
                        .HasColumnName("UserRoleID");

                    b.HasKey("UserMenuMappingId");

                    b.HasIndex("UserMenuId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserMenuMapping", (string)null);
                });

            modelBuilder.Entity("Core.Models.UserPasswordReset", b =>
                {
                    b.Property<int>("ResetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ResetID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResetId"), 1L, 1);

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ResetDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ResetToken")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("TokenStatusId")
                        .HasColumnType("int")
                        .HasColumnName("TokenStatusID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ResetId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "ResetId" }, "IX_UserPasswordResets");

                    b.HasIndex(new[] { "ResetId" }, "IX_UserPasswordResets_1");

                    b.ToTable("UserPasswordResets");
                });

            modelBuilder.Entity("Core.Models.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserRoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"), 1L, 1);

                    b.Property<string>("RoleDescription")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserRoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Core.Models.UserStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"), 1L, 1);

                    b.Property<string>("StatusDescription")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("StatusId");

                    b.ToTable("UserStatus", (string)null);
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("Core.Models.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.AspNetRoleClaim", b =>
                {
                    b.HasOne("Core.Models.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Core.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("Core.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("Core.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.AspNetUserToken", b =>
                {
                    b.HasOne("Core.Models.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.BankBranch", b =>
                {
                    b.HasOne("Core.Models.Bank", "Bank")
                        .WithMany("BankBranches")
                        .HasForeignKey("BankId")
                        .IsRequired()
                        .HasConstraintName("FK_BankBranch_Bank");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("Core.Models.DisciplinaryCase", b =>
                {
                    b.HasOne("Core.Models.Employee", "Employee")
                        .WithMany("DisciplinaryCases")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_DisciplinaryCases_Employee");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Core.Models.Employee", b =>
                {
                    b.HasOne("Core.Models.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_Employee_Department");

                    b.HasOne("Core.Models.EmployeeStatus", "EmployeeStatus")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeStatusId")
                        .HasConstraintName("FK_Employee_EmployeeStatus");

                    b.HasOne("Core.Models.Entity", "Entity")
                        .WithOne("Employee")
                        .HasForeignKey("Core.Models.Employee", "EntityId")
                        .IsRequired()
                        .HasConstraintName("FK_Employee_Entity");

                    b.HasOne("Core.Models.JobGeneral", "JobGeneral")
                        .WithMany("Employees")
                        .HasForeignKey("JobGeneralId")
                        .HasConstraintName("FK_Employee_JobGeneral");

                    b.HasOne("Core.Models.JobGrade", "JobGrade")
                        .WithMany("Employees")
                        .HasForeignKey("JobGradeId")
                        .HasConstraintName("FK_Employee_JobGrade");

                    b.HasOne("Core.Models.JobTitle", "JobTitle")
                        .WithMany("Employees")
                        .HasForeignKey("JobTitleId")
                        .HasConstraintName("FK_Employee_JobTitle");

                    b.HasOne("Core.Models.NatureOfContract", "NatureOfContract")
                        .WithMany("Employees")
                        .HasForeignKey("NatureOfContractId")
                        .HasConstraintName("FK_Employee_NatureOfContract");

                    b.HasOne("Core.Models.TerminationReason", "TerminationReason")
                        .WithMany("Employees")
                        .HasForeignKey("TerminationReasonId")
                        .HasConstraintName("FK_Employee_TerminationReason");

                    b.Navigation("Department");

                    b.Navigation("EmployeeStatus");

                    b.Navigation("Entity");

                    b.Navigation("JobGeneral");

                    b.Navigation("JobGrade");

                    b.Navigation("JobTitle");

                    b.Navigation("NatureOfContract");

                    b.Navigation("TerminationReason");
                });

            modelBuilder.Entity("Core.Models.EmployeeBankDetail", b =>
                {
                    b.HasOne("Core.Models.Employee", "Employee")
                        .WithMany("EmployeeBankDetails")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeBankDetails_Employee");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Core.Models.EmployeeQualification", b =>
                {
                    b.HasOne("Core.Models.Employee", "Employee")
                        .WithMany("EmployeeQualifications")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_EmployeeQualifications_Employee");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Core.Models.EmployeeRemuneration", b =>
                {
                    b.HasOne("Core.Models.Employee", "Employee")
                        .WithMany("EmployeeRemunerations")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeRemuneration_Employee");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Core.Models.Entity", b =>
                {
                    b.HasOne("Core.Models.CountryName", "CountryOfBirth")
                        .WithMany("Entities")
                        .HasForeignKey("CountryOfBirthId")
                        .HasConstraintName("FK_Entity_CountryNames");

                    b.HasOne("Core.Models.EmployeeStatus", "EmployeeStatus")
                        .WithMany("Entities")
                        .HasForeignKey("EmployeeStatusId")
                        .HasConstraintName("FK_Entity_EmployeeStatus");

                    b.HasOne("Core.Models.IdnumberType", "IdnumberTypeNavigation")
                        .WithMany("Entities")
                        .HasForeignKey("IdnumberType")
                        .HasConstraintName("FK_Entity_IDNumberType");

                    b.HasOne("Core.Models.MaritalStatus", "MaritalStatus")
                        .WithMany("Entities")
                        .HasForeignKey("MaritalStatusId")
                        .HasConstraintName("FK_Entity_MaritalStatus");

                    b.HasOne("Core.Models.TitleDescription", "Title")
                        .WithMany("Entities")
                        .HasForeignKey("TitleId")
                        .HasConstraintName("FK_Entity_TitleDescription");

                    b.Navigation("CountryOfBirth");

                    b.Navigation("EmployeeStatus");

                    b.Navigation("IdnumberTypeNavigation");

                    b.Navigation("MaritalStatus");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Core.Models.JobTitle", b =>
                {
                    b.HasOne("Core.Models.JobGrade", "JobGrade")
                        .WithMany("JobTitles")
                        .HasForeignKey("JobGradeId")
                        .HasConstraintName("FK_JobTitle_JobGrade");

                    b.Navigation("JobGrade");
                });

            modelBuilder.Entity("Core.Models.LeaveDetail", b =>
                {
                    b.HasOne("Core.Models.Employee", "Employee")
                        .WithMany("LeaveDetails")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_LeaveDetail_Employee");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Core.Models.PayslipDefinition", b =>
                {
                    b.HasOne("Core.Models.Employee", "Employee")
                        .WithMany("PayslipDefinitions")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_PayslipDefinition_Employee");

                    b.HasOne("Core.Models.PayrollLinesFrequecyCode", "OccurenceCodeNavigation")
                        .WithMany("PayslipDefinitions")
                        .HasForeignKey("OccurenceCode")
                        .HasPrincipalKey("Code")
                        .HasConstraintName("FK_PayslipDefinition_PayrollLinesFrequecyCodes");

                    b.Navigation("Employee");

                    b.Navigation("OccurenceCodeNavigation");
                });

            modelBuilder.Entity("Core.Models.PositionDetail", b =>
                {
                    b.HasOne("Core.Models.Department", "Department")
                        .WithMany("PositionDetails")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_PositionDetails_Department");

                    b.HasOne("Core.Models.JobTitle", "JobTitleCodeNavigation")
                        .WithMany("PositionDetails")
                        .HasForeignKey("JobTitleCode")
                        .HasPrincipalKey("Jobcode")
                        .IsRequired()
                        .HasConstraintName("FK_PositionDetails_JobTitle");

                    b.Navigation("Department");

                    b.Navigation("JobTitleCodeNavigation");
                });

            modelBuilder.Entity("Core.Models.UserDetail", b =>
                {
                    b.HasOne("Core.Models.UserStatus", "ProfileStatusNavigation")
                        .WithMany("UserDetails")
                        .HasForeignKey("ProfileStatus")
                        .HasConstraintName("FK_UserDetail_UserStatus");

                    b.HasOne("Core.Models.UserRole", "UserRole")
                        .WithMany("UserDetails")
                        .HasForeignKey("UserRoleId")
                        .HasConstraintName("FK_UserDetail_UserRoles");

                    b.Navigation("ProfileStatusNavigation");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Core.Models.UserMenuMapping", b =>
                {
                    b.HasOne("Core.Models.UserMenu", "UserMenu")
                        .WithMany("UserMenuMappings")
                        .HasForeignKey("UserMenuId")
                        .HasConstraintName("FK_UserMenuMapping_UserMenu");

                    b.HasOne("Core.Models.UserRole", "UserRole")
                        .WithMany("UserMenuMappings")
                        .HasForeignKey("UserRoleId")
                        .HasConstraintName("FK_UserMenuMapping_UserRoles");

                    b.Navigation("UserMenu");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Core.Models.UserPasswordReset", b =>
                {
                    b.HasOne("Core.Models.UserDetail", "User")
                        .WithMany("UserPasswordResets")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserPasswordResets_UserDetail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("Core.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");
                });

            modelBuilder.Entity("Core.Models.Bank", b =>
                {
                    b.Navigation("BankBranches");
                });

            modelBuilder.Entity("Core.Models.CountryName", b =>
                {
                    b.Navigation("Entities");
                });

            modelBuilder.Entity("Core.Models.Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("PositionDetails");
                });

            modelBuilder.Entity("Core.Models.Employee", b =>
                {
                    b.Navigation("DisciplinaryCases");

                    b.Navigation("EmployeeBankDetails");

                    b.Navigation("EmployeeQualifications");

                    b.Navigation("EmployeeRemunerations");

                    b.Navigation("LeaveDetails");

                    b.Navigation("PayslipDefinitions");
                });

            modelBuilder.Entity("Core.Models.EmployeeStatus", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Entities");
                });

            modelBuilder.Entity("Core.Models.Entity", b =>
                {
                    b.Navigation("Employee")
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.IdnumberType", b =>
                {
                    b.Navigation("Entities");
                });

            modelBuilder.Entity("Core.Models.JobGeneral", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Core.Models.JobGrade", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("JobTitles");
                });

            modelBuilder.Entity("Core.Models.JobTitle", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("PositionDetails");
                });

            modelBuilder.Entity("Core.Models.MaritalStatus", b =>
                {
                    b.Navigation("Entities");
                });

            modelBuilder.Entity("Core.Models.NatureOfContract", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Core.Models.PayrollLinesFrequecyCode", b =>
                {
                    b.Navigation("PayslipDefinitions");
                });

            modelBuilder.Entity("Core.Models.TerminationReason", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Core.Models.TitleDescription", b =>
                {
                    b.Navigation("Entities");
                });

            modelBuilder.Entity("Core.Models.UserDetail", b =>
                {
                    b.Navigation("UserPasswordResets");
                });

            modelBuilder.Entity("Core.Models.UserMenu", b =>
                {
                    b.Navigation("UserMenuMappings");
                });

            modelBuilder.Entity("Core.Models.UserRole", b =>
                {
                    b.Navigation("UserDetails");

                    b.Navigation("UserMenuMappings");
                });

            modelBuilder.Entity("Core.Models.UserStatus", b =>
                {
                    b.Navigation("UserDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
